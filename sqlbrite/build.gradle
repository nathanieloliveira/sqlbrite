buildscript {
  dependencies {
    classpath rootProject.ext.androidPlugin
    classpath rootProject.ext.androidMaven
  }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply from: rootProject.file('gradle/android-findbugs.gradle')

group = 'com.github.nathanieloliveira'

dependencies {
  compile rootProject.ext.rxJava
  compile rootProject.ext.supportAnnotations
  compile rootProject.ext.sqliteSupport

  androidTestCompile rootProject.ext.supportTestRunner
  androidTestCompile(rootProject.ext.truth) {
    exclude group: 'junit' // Android has JUnit built in.
  }
}

def isCi() {
  return "true".equals(System.getenv('CI'))
}

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  defaultConfig {
    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  dexOptions {
    preDexLibraries = !isCi()
  }

  lintOptions {
    textOutput 'stdout'
  }

  buildTypes {
    debug {
      testCoverageEnabled true
    }
  }

  packagingOptions {
    exclude 'LICENSE.txt'
  }
}


if (isCi()) {
  println 'Running on CI. Adding task to start emulator.'

  task startEmulator << {
    "$rootDir/gradle/start-emulator.sh".execute().waitFor()
  }

  android.testVariants.all { variant ->
    variant.connectedInstrumentTest.dependsOn startEmulator
  }
}
